<!-- Updated Highlight.js + custom VS Code style -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/vs2015.min.css">
    
<!-- Include Highlight.js JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>

<!-- Include specific languages if needed -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/xml.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/css.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/json.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/python.min.js"></script>

<!-- Add custom VS Code-like styling -->
<style>
    /* VS Code-like styling for code blocks */
    pre {
        background-color: #1e1e1e !important;
        border-radius: 6px !important;
        margin: 0 !important;
        padding: 16px !important;
        font-family: 'Consolas', 'Courier New', monospace !important;
        font-size: 14px !important;
        line-height: 1.5 !important;
        overflow: auto !important;
        position: relative !important;
        color: #d4d4d4 !important;
    }
    
    code {
        font-family: 'Consolas', 'Courier New', monospace !important;
        background: none !important;
        padding: 0 !important;
        border-radius: 0 !important;
        color: #d4d4d4 !important;
    }
    
    /* Force VS Code color scheme (using !important to override any existing styles) */
    .hljs-keyword, 
    .hljs-selector-tag, 
    .hljs-built_in, 
    .hljs-type, 
    .hljs-literal {
        color: #569cd6 !important;
    }
    
    .hljs-string, 
    .hljs-regexp, 
    .hljs-addition, 
    .hljs-attribute, 
    .hljs-meta .hljs-string {
        color: #ce9178 !important;
    }
    
    .hljs-comment, 
    .hljs-quote, 
    .hljs-deletion {
        color: #6a9955 !important;
    }
    
    .hljs-doctag, 
    .hljs-name, 
    .hljs-selector-id, 
    .hljs-selector-class, 
    .hljs-selector-attr, 
    .hljs-selector-pseudo {
        color: #d7ba7d !important;
    }
    
    .hljs-number {
        color: #b5cea8 !important;
    }
    
    .hljs-symbol, 
    .hljs-bullet, 
    .hljs-link, 
    .hljs-meta, 
    .hljs-selector-id, 
    .hljs-title {
        color: #dcdcaa !important;
    }
    
    .hljs-title.class_, 
    .hljs-class .hljs-title {
        color: #4ec9b0 !important;
    }
    
    .hljs-variable, 
    .hljs-template-variable, 
    .hljs-strong, 
    .hljs-emphasis, 
    .hljs-attr {
        color: #9cdcfe !important;
    }
    
    .hljs-property {
        color: #9cdcfe !important;
    }
    
    .hljs-tag {
        color: #569cd6 !important;
    }
    
    .hljs-name {
        color: #569cd6 !important;
    }
    
    .hljs-attr {
        color: #9cdcfe !important;
    }
    
    /* VS Code-like line numbers */
    .with-line-numbers {
        counter-reset: line !important;
        padding-left: 3.5em !important;
        position: relative !important;
    }
    
    .with-line-numbers::before {
        content: "" !important;
        position: absolute !important;
        left: 0 !important;
        top: 0 !important;
        bottom: 0 !important;
        width: 2.5em !important;
        background: #252526 !important;
        border-right: 1px solid #333 !important;
    }
    
    .with-line-numbers > code {
        position: relative !important;
    }
    
    .with-line-numbers > code > span {
        display: block !important;
        position: relative !important;
    }
    
    .with-line-numbers > code > span::before {
        counter-increment: line !important;
        content: counter(line) !important;
        position: absolute !important;
        left: -3em !important;
        width: 2.5em !important;
        color: #858585 !important;
        text-align: right !important;
        padding-right: 0.5em !important;
    }
    
    /* Ensure code blocks inside cards have proper styling */
    .card .card-body code {
        color: #d4d4d4 !important;
        background-color: #1e1e1e !important;
        padding: 0.2em 0.4em !important;
        border-radius: 3px !important;
        font-family: 'Consolas', 'Courier New', monospace !important;
    }
</style>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><i class="fas fa-file me-2"></i> Object Details</h1>
    <div class="btn-toolbar mb-2 mb-md-0" >
        <a href="/buckets/<%= bucketName %>/objects" class="btn btn-sm btn-outline-secondary me-2">
            <i class="fas fa-arrow-left"></i> Back to Browser
        </a>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card mb-4">
            <div class="card-header">
                <i class="fas fa-info-circle me-1"></i> Basic Information
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">File Name:</div>
                    <div class="col-md-9"><%= object.name %></div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">Object Key:</div>
                    <div class="col-md-9"><code class="language-javascript"><%= object.key %></code></div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">File Size:</div>
                    <div class="col-md-9"><%= formatFileSize(object.size) %></div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">MIME Type:</div>
                    <div class="col-md-9"><%= object.type || 'Unknown' %></div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">Last Modified:</div>
                    <div class="col-md-9"><%= formatDate(object.lastModified) %></div>
                </div>
            </div>
        </div>

        <% 
            // Define file type categories
            const isImageFile = (type) => type && type.startsWith('image/');
            const isPDFFile = (type) => type === 'application/pdf';
            const isTextFile = (type) => {
            const textTypes = ['.txt', '.js', '.jsx', '.html', '.css', '.json', '.md', '.xml', '.csv'];
            return textTypes.some(ext => object.name.toLowerCase().endsWith(ext));
            };

            // Determine the appropriate preview method
            if (isImageFile(object.type)) { 
            %>
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-eye me-1"></i> Preview: <%= object.name %>
                </div>
                <div class="card-body text-center">
                    <img src="<%= object.publicUrl %>" class="img-fluid" alt="<%= object.name %>" 
                        style="max-height: 400px;" 
                        onerror="this.onerror=null; this.src='/objects/<%= bucketName %>/<%= encodeURIComponent(object.key) %>/download'; this.classList.add('preview-fallback');">
                </div>
            </div>
            <% } else if (isPDFFile(object.type)) { %>
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-file-pdf me-1"></i> PDF Preview: <%= object.name %>
                </div>
                <div class="card-body text-center">
                    <object data="<%= object.publicUrl %>" 
                            type="application/pdf" 
                            width="100%" height="700"
                            onerror="this.onerror=null; this.data='/objects/<%= bucketName %>/<%= encodeURIComponent(object.key) %>/download'; this.classList.add('preview-fallback');">
                        <p>Your browser doesn't support PDF preview. <a href="/objects/<%= bucketName %>/<%= encodeURIComponent(object.key) %>/download">Download the PDF</a> instead.</p>
                    </object>
                </div>
            </div>
            <% } else if (isTextFile(object.type) || isTextFile('')) { %>
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-file-code me-1"></i> Code/Text Preview: <%= object.name %>
                </div>
                <div class="card-body">
                    <div class="code-preview" id="codePreview_<%= object.key.replace(/[^a-zA-Z0-9]/g, '_') %>">
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Loading preview...</p>
                        </div>
                    </div>
                    <div class="mt-3 text-center" style="position: sticky;bottom: 0;">
                        <a href="/objects/<%= bucketName %>/<%= encodeURIComponent(object.key) %>/download" class="btn btn-sm btn-primary">
                            <i class="fas fa-download me-1"></i> Download File
                        </a>
                    </div>
                </div>
            </div>

            <script>
            // Fetch and display code files with VS Code-like styling
            document.addEventListener('DOMContentLoaded', function() {
                const previewContainer = document.getElementById('codePreview_<%= object.key.replace(/[^a-zA-Z0-9]/g, '_') %>');
                
                // First, make sure highlight.js is initialized
                if (typeof hljs === 'undefined') {
                    console.error('highlight.js is not loaded');
                    previewContainer.innerHTML = '<div class="alert alert-warning">Syntax highlighting library not loaded.</div>';
                    return;
                }
                
                fetch('/objects/<%= bucketName %>/<%= encodeURIComponent(object.key) %>/download')
                    .then(response => response.text())
                    .then(content => {
                        // Create pre and code elements
                        const pre = document.createElement('pre');
                        pre.className = 'with-line-numbers';
                        const code = document.createElement('code');
                        
                        // Determine language for syntax highlighting based on file extension
                        const fileName = '<%= object.name %>';
                        const fileExtension = fileName.split('.').pop().toLowerCase();
                        let language = 'plaintext';
                        
                        // Map file extensions to highlight.js languages
                        const languageMap = {
                            'js': 'javascript',
                            'jsx': 'javascript',
                            'ts': 'typescript',
                            'tsx': 'typescript',
                            'html': 'html',
                            'css': 'css',
                            'json': 'json',
                            'xml': 'xml',
                            'md': 'markdown',
                            'py': 'python',
                            'java': 'java',
                            'c': 'c',
                            'cpp': 'cpp',
                            'cs': 'csharp',
                            'go': 'go',
                            'php': 'php',
                            'rb': 'ruby',
                            'sh': 'bash',
                            'yml': 'yaml',
                            'yaml': 'yaml',
                            'sql': 'sql'
                        };
                        
                        if (languageMap[fileExtension]) {
                            language = languageMap[fileExtension];
                        }
                        
                        // Apply the content and language class directly
                        code.textContent = content;
                        code.className = `language-${language}`;
                        pre.appendChild(code);
                        
                        // Replace loading spinner with code
                        previewContainer.innerHTML = '';
                        previewContainer.appendChild(pre);
                        
                        // Fix for syntax highlighting - explicitly force highlighting with the correct language
                        try {
                            // Force highlighting with explicit language
                            const result = hljs.highlight(content, {
                                language: language,
                                ignoreIllegals: true
                            });
                            
                            // Apply the highlighted HTML
                            code.innerHTML = result.value;
                            
                            // Add line numbers - process after highlighting
                            const codeLines = code.innerHTML.split('\n');
                            let numberedCode = '';
                            
                            codeLines.forEach(line => {
                                numberedCode += `<span>${line}</span>\n`;
                            });
                            
                            code.innerHTML = numberedCode;
                            
                            console.log('Syntax highlighting applied successfully');
                        } catch (error) {
                            console.error('Error applying syntax highlighting:', error);
                            // Fallback - at least display the code
                        }
                    })
                    .catch(error => {
                        previewContainer.innerHTML = `<div class="alert alert-danger">
                            Failed to load preview. <a href="/objects/<%= bucketName %>/<%= encodeURIComponent(object.key) %>/download">Download the file</a> instead.
                        </div>`;
                        console.error('Error loading file preview:', error);
                    });
            });
            </script>
            <% } else { %>
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-file me-1"></i> File: <%= object.name %>
                </div>
                <div class="card-body text-center">
                    <p class="mb-3">Preview not available for this file type.</p>
                    <a href="/objects/<%= bucketName %>/<%= encodeURIComponent(object.key) %>/download" class="btn btn-primary">
                        <i class="fas fa-download me-1"></i> Download File
                    </a>
                </div>
            </div>
            <% } %>

        <div class="card">
            <div class="card-header">
                <i class="fas fa-link me-1"></i> Object URLs
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Public URL:</label>
                    <div class="input-group">
                        <input type="text" class="form-control" value="<%= object.publicUrl %>" readonly id="publicUrl">
                        <button class="btn btn-outline-primary" type="button" id="copyPublicUrl">
                            <i class="fas fa-copy"></i> Copy
                        </button>
                    </div>
                    <div class="form-text">
                        Note: This URL will only work if your bucket has public access enabled.
                    </div>
                </div>
                
                <div>
                    <a href="/objects/<%= bucketName %>/<%= encodeURIComponent(object.key) %>/share" class="btn btn-primary">
                        <i class="fas fa-share-alt"></i> Generate Temporary Shareable Link
                    </a>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card mb-4">
            <div class="card-header">
                <i class="fas fa-server me-1"></i> Storage Information
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-5 fw-bold">Bucket:</div>
                    <div class="col-7"><%= bucketName %></div>
                </div>
                <div class="row mb-3">
                    <div class="col-5 fw-bold">S3 Endpoint:</div>
                    <div class="col-7 text-truncate"><small><%= s3Endpoint %></small></div>
                </div>
            </div>
        </div>
        
        <% if (Object.keys(object.metadata).length > 0) { %>
        <div class="card mb-4">
            <div class="card-header">
                <i class="fas fa-tags me-1"></i> Metadata
            </div>
            <div class="card-body p-0">
                <ul class="list-group list-group-flush">
                    <% Object.entries(object.metadata).forEach(([key, value]) => { %>
                        <li class="list-group-item">
                            <div class="fw-bold"><%= key %>:</div>
                            <div><%= value %></div>
                        </li>
                    <% }); %>
                </ul>
            </div>
        </div>
        <% } %>
        
        <div class="card">
            <div class="card-header">
                <i class="fas fa-cog me-1"></i>File Actions
            </div>
            <div class="card-body">
                <div class="d-grid gap-2" style="display: flex !important;justify-content: center;align-items: center;flex-direction: row;">
                    <a href="/objects/<%= bucketName %>/<%= encodeURIComponent(object.key) %>/download" class="btn btn-primary">
                        <i class="fas fa-download"></i> Download
                    </a>
                    <a href="/objects/<%= bucketName %>/<%= encodeURIComponent(object.key) %>/share" class="btn btn-success">
                        <i class="fas fa-share-alt"></i> Share
                    </a>
                    <button data-file-name="<%= object.name %>" data-file-key="<%= object.key %>" class="btn btn-danger delete-file-btn">
                        <i class="fas fa-trash-alt"></i> Delete
                    </button>
                </div>
            </div>
        </div>
        <!-- ACL Permissions Card -->
        <div class="card mb-4">
            <div class="card-header">
                <i class="fas fa-lock me-1"></i> Access Permissions (ACL)
            </div>
            <div class="card-body">
                <form id="aclForm">
                    <input type="hidden" id="objectKeyInput" value="<%= object.key %>">
                    <input type="hidden" id="bucketName" value="<%= bucketName %>">
                    <div class="mb-3">
                        <label class="form-label">Object ACL:</label>
                        <select class="form-select" id="objectAcl" name="acl">
                            <option value="private" <%= object.acl === 'private' ? 'selected' : '' %>>Private</option>
                            <option value="public-read" <%= object.acl === 'public-read' ? 'selected' : '' %>>Public Read</option>
                            <option value="authenticated-read" <%= object.acl === 'authenticated-read' ? 'selected' : '' %>>Authenticated Read</option>
                            <option value="bucket-owner-read" <%= object.acl === 'bucket-owner-read' ? 'selected' : '' %>>Bucket Owner Read</option>
                            <option value="bucket-owner-full-control" <%= object.acl === 'bucket-owner-full-control' ? 'selected' : '' %>>Bucket Owner Full Control</option>
                        </select>
                        <div class="form-text">
                            Change who can access this object and what permissions they have.
                        </div>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" id="updateAcl">
                            <i class="fas fa-save me-1"></i> Update Permissions
                        </button>
                    </div>
                </form>
                <div class="alert alert-success mt-3 d-none" id="aclUpdateSuccess">
                    <i class="fas fa-check-circle me-1"></i> Permissions updated successfully!
                </div>
                <div class="alert alert-danger mt-3 d-none" id="aclUpdateError">
                    <i class="fas fa-exclamation-circle me-1"></i> <span id="aclErrorMessage">Error updating permissions</span>
                </div>
            </div>
        </div>
</div>

<!-- Delete File Modal -->
<div class="modal fade" id="deleteFileModal" tabindex="-1" aria-labelledby="deleteFileModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteFileModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete the file <strong id="deleteFileName"></strong>?
                <p class="text-danger mt-2">
                    <i class="fas fa-exclamation-triangle"></i> This action cannot be undone.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteFileForm" method="POST" style="display: inline;">
                    <input type="hidden" name="_method" value="DELETE">
                    <button type="submit" class="btn btn-danger">Delete File</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize syntax highlighting for all code blocks
        document.querySelectorAll('pre code').forEach(block => {
            hljs.highlightElement(block);
        });
        
        // Copy URL to clipboard
        document.getElementById('copyPublicUrl').addEventListener('click', function() {
            const urlField = document.getElementById('publicUrl');
            urlField.select();
            document.execCommand('copy');
            
            // Show success message
            const btn = this;
            const originalText = btn.innerHTML;
            btn.innerHTML = '<i class="fas fa-check"></i> Copied!';
            btn.classList.remove('btn-outline-primary');
            btn.classList.add('btn-success');
            
            setTimeout(function() {
                btn.innerHTML = originalText;
                btn.classList.remove('btn-success');
                btn.classList.add('btn-outline-primary');
            }, 2000);
        });
        
        // Handle delete file button clicks
        const deleteFileBtns = document.querySelectorAll('.delete-file-btn');
        deleteFileBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                const fileName = this.dataset.fileName;
                const fileKey = this.dataset.fileKey;
                
                document.getElementById('deleteFileName').textContent = fileName;
                document.getElementById('deleteFileForm').action = `/objects/<%= bucketName %>/${encodeURIComponent(fileKey)}`;
                
                const myModal = new bootstrap.Modal(document.getElementById('deleteFileModal'));
                myModal.show();
            });
        });

        /*ACL Policy*/

        const aclForm = document.getElementById('aclForm');
        
        if (aclForm) {
            aclForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const selectedAcl = document.getElementById('objectAcl').value;
                const bucketName = document.getElementById("bucketName").value;
                const objectKey = document.getElementById('objectKeyInput').value;
                
                if (!bucketName || !objectKey) {
                    showError('Missing bucket name or object key');
                    return;
                }
                
                // Show loading state
                const updateButton = document.getElementById('updateAcl');
                const originalButtonText = updateButton.innerHTML;
                updateButton.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Updating...';
                updateButton.disabled = true;
                
                // Hide any existing alerts
                hideAlerts();
                
                // Make AJAX request to update ACL
                fetch(`/objects/${encodeURIComponent(bucketName)}/${encodeURIComponent(objectKey)}/acl`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ acl: selectedAcl})
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => {
                            throw new Error(err.message || 'Failed to update permissions');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    // Show success message
                    showSuccess('Permissions updated successfully!');
                    
                    // Auto-hide success message after 3 seconds
                    setTimeout(hideAlerts, 3000);
                })
                .catch(error => {
                    // Show error message
                    showError(error.message || 'Error updating permissions');
                })
                .finally(() => {
                    // Reset button state
                    updateButton.innerHTML = originalButtonText;
                    updateButton.disabled = false;
                });
            });
        }
        
        // Helper functions for alerts
        function showSuccess(message) {
            const successAlert = document.getElementById('aclUpdateSuccess');
            successAlert.textContent = message;
            successAlert.classList.remove('d-none');
        }
        
        function showError(message) {
            const errorElement = document.getElementById('aclErrorMessage');
            errorElement.textContent = message;
            document.getElementById('aclUpdateError').classList.remove('d-none');
        }
        
        function hideAlerts() {
            document.getElementById('aclUpdateSuccess').classList.add('d-none');
            document.getElementById('aclUpdateError').classList.add('d-none');
        }
    });
    
    // Helper function to format file size
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    // Helper function to format date
    function formatDate(date) {
        if (!date) return '';
        
        const d = new Date(date);
        return d.toLocaleDateString() + ' ' + d.toLocaleTimeString();
    }
    
    // Check if file is an image for preview
    function isImageFile(mimeType) {
        if (!mimeType) return false;
        return mimeType.startsWith('image/');
    }
</script>